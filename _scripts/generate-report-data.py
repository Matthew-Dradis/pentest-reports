#!/usr/bin/env python3
# -*- coding: utf-8 -*-

template = """---
layout: report
image: {ENGAGEMENT_PREVIEW_IMAGE} 
team: {TEAM}
engagement_name: {ENGAGEMENT} 
engagement_preview_file: {ENGAGEMENT_PREVIEW_IMAGE} 
engagement_pdf_file: {ENGAGEMENT_PDF_FILE} 
report_keywords: {KEYWORDS}
report_cves: {CVES}

# Page specifics
title: {TEAM} - {ENGAGEMENT} 
description: View and download a complete penetration test report from {TEAM}. Learn about {TEAM}'s methodology and tools used in pentest reports.
---
"""

data = {
	"items": []
}

import os

from typing import List, Set
import subprocess
from shlex import quote

import re
import pandas as pd
import PyPDF2
from gensim.summarization import keywords

def extract_text(pdf_filename) -> str:
	text = ""
	with open(pdf_filename, 'rb') as pdf_fd:
		pdf_reader = PyPDF2.PdfFileReader(pdf_fd)
		for page in pdf_reader.pages:
			try:
				text += page.extractText()
			except:
				pass

	return text

def extract_keywords(text: str) -> List[str]:
	values = keywords(text = text.lower(), split = '\n', scores = True)
	data = pd.DataFrame(values, columns = ['keyword', 'score'])
	data = data.sort_values('score', ascending = False)
	report_keywords = data["keyword"].tolist()
	return report_keywords

def extract_cves(text: str) -> Set[str]:
	r = re.compile(r'cve-\d\d\d\d-\d\d\d\d', re.IGNORECASE)
	return re.findall(r, text)

for entry in os.listdir("reports"):
	if entry not in [".", "..", "index.md"]:
		print(f"Entry: {entry}\n")
		reportDirName = "reports/" + entry
		for file in os.listdir(os.path.join("reports", entry)):
			if file.endswith(".pdf"):
				pdf_filename = f"{reportDirName}/{file}"
				print(f"file: {file}\n")

				report_text = extract_text(pdf_filename)

				report_keywords = extract_keywords(report_text)
				print(report_keywords)
				report_cves = extract_cves(report_text)
				print(report_cves)

				basefile = file[0:-4]
				title = basefile.replace('_', ' ')
				content = template.format(
						TEAM = entry,
						ENGAGEMENT = title, 
						ENGAGEMENT_PREVIEW_IMAGE = f"/reports/{entry}/{basefile}.png",
						ENGAGEMENT_PDF_FILE = basefile + '.pdf',
						KEYWORDS = ', '.join(report_keywords),
						CVES = ', '.join(report_cves),
						)
				with open(f"reports/{entry}/{basefile}.md", 'w') as fd:
					fd.write(content)

				data["items"].append({
					"name": f"{entry} - {title}",
					"link": f"/reports/{entry}/{basefile}.html" 
				})

				os.system("pdftoppm -singlefile -png -f 1 -l 1 " + quote(pdf_filename) + " " + quote(f"{reportDirName}/{basefile}"))

import yaml

class Dumper(yaml.Dumper):
	def increase_indent(self, flow=False, *args, **kwargs):
		return super().increase_indent(flow=flow, indentless=False)

with open("_data/reports.yml", 'w') as fd:
    fd.write(yaml.dump(data, sort_keys=False, Dumper=Dumper))

